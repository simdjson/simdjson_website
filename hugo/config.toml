baseurl = "https://simdjson.org/"
author = "Daniel Lemire"
title = "The simdjson library"
languageCode = "en-us"
theme = "hugof"
enableRobotsTXT = true
SectionPagesMenu = ["main", "social"]

[params.image]
ImageURL = "simdjsonlogo.png"
IconURL = "simdjsonlogo.png"
ImageCredit = "Picture credit: Egor Bogatov"

[params.meta]
description = "The simdjson library"
keywords = "open source, JSON, C++"

[params.hero]
herotitle = "Parsing gigabytes of JSON per second"
herodiscription = "JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. The simdjson library uses commonly available SIMD instructions and microparallel algorithms to parse JSON 2.5 times faster than anything else out there."
#heroquote = """>Use Roaring for bitmap compression whenever possible. Do not use other bitmap compression methods ([Wang et al., SIGMOD 2017](http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf))"""
btnblue = "Browse the API"
btnblueurl = "api/0.3.0/index.html"
btngreen = "The simdjson library on GitHub"
btngreenurl = "https://github.com/simdjson/simdjson"
[params.main]
contentOneTitle = "Highlights"
contentTwoTitle = "Features"

contentOneBody = """
* **Fast:** Over 2.5x faster than other production-grade JSON parsers.
* **Easy:** First-class, easy to use API.
* **Strict:** Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.
* **Automatic:** Selects a CPU-tailored parser at runtime. No configuration needed.
* **Reliable:** From memory allocation to error handling, simdjson's design avoids surprises.

This library is part of the [Awesome Modern C++](https://awesomecpp.com) list.
 """

contentTwoBody = """
* [**Multithreaded processing**](https://github.com/simdjson/simdjson/blob/master/doc/basics.md#newline-delimited-json-ndjson-and-json-lines)  of gigantic Newline-Delimited JSON (ndjson) and related formats
* [**JSON Pointe**r](https://github.com/simdjson/simdjson/blob/master/doc/basics.md#json-pointer) support so that you can query your document at high speed
* [**Support both conventional error handling (exceptions) as well as an error-code approach**](https://github.com/simdjson/simdjson/blob/master/doc/basics.md#error-handling): you can compile your C++ code with or without exception support.
* [**Runtime dispatch**](https://github.com/simdjson/simdjson/blob/master/doc/implementation-selection.methods): the library automatically detects the features supported by the processor. The library runs on all 64-bit systems, but it automagically benefits from advanced processors.
"""


[params.footer]
emailtext = "Get in touch"
email = "lemire@gmail.com"
[[menu.main]]
name = "About"
url = "/about"

[[menu.main]]
name = "Software"
url = "/software"

[[menu.main]]
name = "Publications"
url = "/publications"

[[menu.main]]
name = "Talks"
url = "/talks"


[[menu.social]]
name = "Google Groups"
url = "https://groups.google.com/forum/#!forum/the-simdjson-library"

[[menu.social]]
name = "Github"
url = "http://github.com/simdjson/simdjson"
